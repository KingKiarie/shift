import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const formatCurrency = (amount: number) =>
  new Intl.NumberFormat("en-KE", {
    style: "currency",
    currency: "KES",
  }).format(amount);

const formatDate = (date: string) =>
  new Date(date).toLocaleDateString("en-KE", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });

const formatNumber = (value: number) => {
  return new Intl.NumberFormat("en-US").format(value || 0);
};

export const generateShiftReportPDF = (summary: any, fileName: string) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  let y = 20;

  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("Salesman summary report trip", pageWidth / 2, y, {
    align: "center",
  });
  y += 10;

  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`Shift ID: ${summary.shiftid || "N/A"}`, 14, y);
  y += 15;

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Report Details", 14, y);
  y += 10;

  const tableData =
    summary.reportDetails?.map((item: any) => [
      item.itemcode || "N/A",
      formatNumber(item.qtySold || 0),
      formatNumber(item.qtyRequested || 0),
      formatNumber(item.qtyTaken || 0),
      formatNumber(item.qtyReturned || 0),
      formatCurrency(item.totalSale || 0),
      formatCurrency(item.avgPrice || 0),
      formatCurrency(item.stdCost || 0),
      formatCurrency(item.margin || 0),
    ]) || [];

  autoTable(doc, {
    startY: y,
    head: [
      [
        "Item Code",
        "Qty Sold",
        "Qty Requested",
        "Qty Taken",
        "Qty Returned",
        "Total Sale",
        "Avg Price",
        "Std Cost",
        "Margin",
      ],
    ],
    body: tableData,
    theme: "grid",
    styles: {
      fontSize: 8,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 2,
    },
    headStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      fontStyle: "bold",
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    didDrawPage: (data) => {
      y = data.cursor.y + 10;
    },
  });

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Grand Totals", 14, y);
  y += 10;

  const totals =
    summary.reportDetails?.reduce(
      (acc: any, item: any) => ({
        qtyTaken: acc.qtyTaken + (item.qtyTaken || 0),
        qtyReturned: acc.qtyReturned + (item.qtyReturned || 0),
        qtySold: acc.qtySold + (item.qtySold || 0),
        totalSale: acc.totalSale + (item.totalSale || 0),
      }),
      { qtyTaken: 0, qtyReturned: 0, qtySold: 0, totalSale: 0 }
    ) || {};

  const grandTotalsData = [
    ["Qty Taken:", formatNumber(totals.qtyTaken || 0)],
    ["Qty Returned:", formatNumber(totals.qtyReturned || 0)],
    ["Qty Sold:", formatNumber(totals.qtySold || 0)],
    ["Total Sale:", formatCurrency(totals.totalSale || 0)],
    [
      "Margin:",
      summary.reportDetails?.[0]?.margin
        ? formatCurrency(summary.reportDetails[0].margin)
        : "KES 0.00",
    ],
  ];

  autoTable(doc, {
    startY: y,
    body: grandTotalsData,
    theme: "grid",
    styles: {
      fontSize: 10,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 3,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    columnStyles: {
      0: { fontStyle: "normal", halign: "left" },
      1: { fontStyle: "normal", halign: "right" },
    },
    didDrawPage: (data) => {
      y = data.cursor.y + 10;
    },
  });

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Profit Overview", 14, y);
  y += 10;

  const grandProfit =
    summary.reportDetails?.reduce((acc: number, item: any) => {
      return (
        acc +
        ((item.totalSale || 0) - (item.stdCost || 0) * (item.qtySold || 0))
      );
    }, 0) || 0;

  const netProfit = grandProfit - (summary.profitOverview?.shiftExpense || 0);

  const profitOverviewData = [
    ["Grand Profit:", formatCurrency(grandProfit)],
    [
      "Shift Expense:",
      formatCurrency(summary.profitOverview?.shiftExpense || 0),
    ],
    ["Net Profit:", formatCurrency(netProfit)],
  ];

  autoTable(doc, {
    startY: y,
    body: profitOverviewData,
    theme: "grid",
    styles: {
      fontSize: 10,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 3,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    columnStyles: {
      0: { fontStyle: "normal", halign: "left" },
      1: { fontStyle: "normal", halign: "right" },
    },
  });

  doc.save(fileName);
};

export const generateSalesSummaryPDF = (summary: any, fileName: string) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  let y = 20;

  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("Shift Sales Summary Report", pageWidth / 2, y, { align: "center" });
  y += 10;

  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(
    `Shift ID: ${
      summary.shiftid || summary.shiftDetails?.[0]?.shiftID || "N/A"
    }`,
    14,
    y
  );
  y += 15;

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Report Details", 14, y);
  y += 10;

  const tableData =
    summary.reportDetails?.map((item: any) => [
      item.itemcode || "N/A",
      formatNumber(item.qtySold || 0),
      formatNumber(item.qtyRequested || 0),
      formatNumber(item.qtyTaken || 0),
      formatNumber(item.qtyReturned || 0),
      formatCurrency(item.totalSale || 0),
      formatCurrency(item.avgPrice || 0),
      formatCurrency(item.stdCost || 0),
      formatCurrency(item.margin || 0),
    ]) || [];

  autoTable(doc, {
    startY: y,
    head: [
      [
        "Item Code",
        "Qty Sold",
        "Qty Requested",
        "Qty Taken",
        "Qty Returned",
        "Total Sale",
        "Avg Price",
        "Std Cost",
        "Margin",
      ],
    ],
    body: tableData,
    theme: "grid",
    styles: {
      fontSize: 8,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 2,
    },
    headStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      fontStyle: "bold",
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    didDrawPage: (data) => {
      y = data.cursor.y + 10;
    },
  });

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Grand Totals", 14, y);
  y += 10;

  const totals =
    summary.reportDetails?.reduce(
      (acc: any, item: any) => ({
        qtyTaken: acc.qtyTaken + (item.qtyTaken || 0),
        qtyReturned: acc.qtyReturned + (item.qtyReturned || 0),
        qtySold: acc.qtySold + (item.qtySold || 0),
        totalSale: acc.totalSale + (item.totalSale || 0),
      }),
      { qtyTaken: 0, qtyReturned: 0, qtySold: 0, totalSale: 0 }
    ) || {};

  const grandTotalsData = [
    ["Qty Taken:", formatNumber(totals.qtyTaken || 0)],
    ["Qty Returned:", formatNumber(totals.qtyReturned || 0)],
    ["Qty Sold:", formatNumber(totals.qtySold || 0)],
    ["Total Sale:", formatCurrency(totals.totalSale || 0)],
    [
      "Margin:",
      summary.reportDetails?.[0]?.margin
        ? formatCurrency(summary.reportDetails[0].margin)
        : "KES 0.00",
    ],
  ];

  autoTable(doc, {
    startY: y,
    body: grandTotalsData,
    theme: "grid",
    styles: {
      fontSize: 10,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 3,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    columnStyles: {
      0: { fontStyle: "normal", halign: "left" },
      1: { fontStyle: "normal", halign: "right" },
    },
    didDrawPage: (data) => {
      y = data.cursor.y + 10;
    },
  });

  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Profit Overview", 14, y);
  y += 10;

  const grandProfit =
    summary.reportDetails?.reduce((acc: number, item: any) => {
      return (
        acc +
        ((item.totalSale || 0) - (item.stdCost || 0) * (item.qtySold || 0))
      );
    }, 0) || 0;

  const netProfit = grandProfit - (summary.profitOverview?.shiftExpense || 0);

  const profitOverviewData = [
    ["Grand Profit:", formatCurrency(grandProfit)],
    [
      "Shift Expense:",
      formatCurrency(summary.profitOverview?.shiftExpense || 0),
    ],
    ["Net Profit:", formatCurrency(netProfit)],
  ];

  autoTable(doc, {
    startY: y,
    body: profitOverviewData,
    theme: "grid",
    styles: {
      fontSize: 10,
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
      cellPadding: 3,
    },
    bodyStyles: {
      fillColor: [255, 255, 255],
      textColor: [0, 0, 0],
      lineColor: [0, 0, 0],
      lineWidth: 0.5,
    },
    columnStyles: {
      0: { fontStyle: "normal", halign: "left" },
      1: { fontStyle: "normal", halign: "right" },
    },
  });

  doc.save(fileName);
};
